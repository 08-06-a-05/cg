# Form implementation generated from reading ui file '.\kg2.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from typing import Type

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QLineF
from PyQt6.QtWidgets import QMessageBox

import mediator


class Ui_MainWindow(object):
    def __init__(self, MainWindow, scene_objects):
        self.main_window = MainWindow
        self.setupUi(MainWindow)
        self.scene_objects: mediator.SceneObjects = scene_objects

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(780, 680)
        font = QtGui.QFont()
        font.setPointSize(13)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.resultView = QtWidgets.QGraphicsView(parent=self.centralwidget)
        self.resultView.setGeometry(QtCore.QRect(110, 30, 581, 321))
        self.resultView.setObjectName("resultView")
        self.scene = QtWidgets.QGraphicsScene(parent=self.resultView)
        self.scene_size = (560, 310)
        self.scene_center = (self.scene_size[0] / 2, self.scene_size[1] / 2)
        self.scene.setSceneRect(QtCore.QRectF(0, 0, 560, 310))
        self.scene.setObjectName("scene")
        self.resultView.setScene(self.scene)
        self.cancel_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.cancel_button.setGeometry(QtCore.QRect(40, 580, 280, 30))
        self.cancel_button.setObjectName("cancel_button")
        self.reset_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.reset_button.setGeometry(QtCore.QRect(40, 620, 280, 30))
        self.reset_button.setObjectName("reset_button")
        self.dx_value = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.dx_value.setGeometry(QtCore.QRect(190, 370, 113, 30))
        self.dx_value.setObjectName("dx_value")
        self.dx_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.dx_label.setGeometry(QtCore.QRect(40, 370, 140, 30))
        self.dx_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.dx_label.setObjectName("dx_label")
        self.dy_value = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.dy_value.setGeometry(QtCore.QRect(190, 410, 113, 30))
        self.dy_value.setObjectName("dy_value")
        self.dy_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.dy_label.setGeometry(QtCore.QRect(40, 410, 140, 30))
        self.dy_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.dy_label.setObjectName("dy_label")
        self.move_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.move_button.setGeometry(QtCore.QRect(410, 500, 320, 30))
        self.move_button.setObjectName("move_button")
        self.center_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.center_label.setGeometry(QtCore.QRect(410, 450, 320, 20))
        self.center_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.center_label.setObjectName("center_label")
        self.center_x_value = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.center_x_value.setGeometry(QtCore.QRect(410, 370, 113, 30))
        self.center_x_value.setObjectName("center_x_value")
        self.center_y_value = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.center_y_value.setGeometry(QtCore.QRect(410, 410, 113, 30))
        self.center_y_value.setObjectName("center_y_value")
        self.center_x_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.center_x_label.setGeometry(QtCore.QRect(320, 370, 80, 30))
        self.center_x_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.center_x_label.setObjectName("center_x_label")
        self.center_y_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.center_y_label.setGeometry(QtCore.QRect(320, 410, 80, 30))
        self.center_y_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.center_y_label.setObjectName("center_y_label")
        self.scale_xy_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.scale_xy_button.setGeometry(QtCore.QRect(550, 370, 210, 30))
        self.scale_xy_button.setObjectName("scale_xy_button")
        self.rotate_xy_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.rotate_xy_button.setGeometry(QtCore.QRect(550, 410, 210, 30))
        self.rotate_xy_button.setObjectName("rotate_xy_button")
        self.center_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.center_button.setGeometry(QtCore.QRect(410, 620, 320, 30))
        self.center_button.setObjectName("center_button")
        self.scale_center_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.scale_center_button.setGeometry(QtCore.QRect(410, 540, 320, 30))
        self.scale_center_button.setObjectName("scale_center_button")
        self.rotate_center_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.rotate_center_button.setGeometry(QtCore.QRect(410, 580, 320, 30))
        self.rotate_center_button.setObjectName("rotate_center_button")

        self.angle_value = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.angle_value.setGeometry(QtCore.QRect(190, 450, 113, 30))
        self.angle_value.setObjectName("angle_value")
        self.angle_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.angle_label.setGeometry(QtCore.QRect(40, 450, 140, 30))
        self.angle_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.angle_label.setObjectName("angle_label")

        self.x_scale_value = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.x_scale_value.setGeometry(QtCore.QRect(190, 490, 113, 30))
        self.x_scale_value.setObjectName("x_scale_value")
        self.x_scale_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.x_scale_label.setGeometry(QtCore.QRect(40, 490, 140, 30))
        self.x_scale_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.x_scale_label.setObjectName("x_scale_label")

        self.center_image_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.center_image_label.setGeometry(QtCore.QRect(410, 470, 320, 30))
        self.center_image_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.center_image_label.setObjectName("center_image_label")

        self.y_scale_value = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.y_scale_value.setGeometry(QtCore.QRect(190, 530, 113, 30))
        self.y_scale_value.setObjectName("y_scale_value")
        self.y_scale_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.y_scale_label.setGeometry(QtCore.QRect(40, 530, 140, 30))
        self.y_scale_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.y_scale_label.setObjectName("y_scale_label")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 780, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.make_connects()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.cancel_button.setText(_translate("MainWindow", "Отмена предыдущей операции"))
        self.reset_button.setText(_translate("MainWindow", "Вернуться к исходному"))
        self.dx_label.setText(_translate("MainWindow", "Смещение по x:"))
        self.angle_label.setText(_translate("MainWindow", "Угол поворота:"))
        self.x_scale_label.setText(_translate("MainWindow", "Масштаб x:"))
        self.y_scale_label.setText(_translate("MainWindow", "Масштаб y:"))
        self.dy_label.setText(_translate("MainWindow", "Смещение по y:"))
        self.move_button.setText(_translate("MainWindow", "Сместить"))
        self.center_label.setText(_translate("MainWindow", f"Центр экрана: {self.scene_size[0] / 2:.0f}, {self.scene_size[1] / 2:.0f}"))
        self.center_x_label.setText(_translate("MainWindow", "Центр x:"))
        self.center_y_label.setText(_translate("MainWindow", "Центр y:"))
        self.scale_xy_button.setText(_translate("MainWindow", "Масштабирование (x, y)"))
        self.rotate_xy_button.setText(_translate("MainWindow", "Поворот (x, y)"))
        self.center_button.setText(_translate("MainWindow", "Центрировать изображение"))
        self.scale_center_button.setText(_translate("MainWindow", "Масштабирование (центр экрана)"))
        self.rotate_center_button.setText(_translate("MainWindow", "Поворот (центр экрана)"))
        # self.center_image_label.setText(_translate("MainWindow", f"Центр изображения: ({self.scene_objects.get_center():.1f},{self.scene_objects.get_center():.1f})"))
        # self.angle_value.setText(_translate("MainWindow", ""))

    def make_connects(self):
        self.move_button.clicked.connect(self.move_button_handler)
        self.cancel_button.clicked.connect(self.cancel_button_handler)
        self.reset_button.clicked.connect(self.reset_button_handler)
        self.center_button.clicked.connect(self.center_button_handler)
        self.scale_xy_button.clicked.connect(self.scale_xy_button_handler)
        self.scale_center_button.clicked.connect(self.scale_center_button_handler)
        self.rotate_xy_button.clicked.connect(self.rotate_xy_button_handler)
        self.rotate_center_button.clicked.connect(self.rotate_center_button_handler)

    @staticmethod
    def validate(req_type: Type[float], s: str) -> bool:
        """
        Проверяет, что функция соответствует переданному типу.

        :param req_type: Ожидаемый тип, к которому должна быть приводима строка.
        :param s: Строка.
        :return: Является ли строка корректным значением.
        """
        try:
            req_type(s)
        except ValueError:
            return False
        else:
            return True

    def show_error(self, title: str, message: str) -> None:
        """
        Отображение сообщения об ошибке.

        :param title: Заголовок сообщения
        :param message: Текст сообщения
        :return: None
        """
        QMessageBox.critical(self.main_window, title, message)

    def draw_line(self, edge: tuple[tuple[float, float], tuple[float, float]], color: QtGui.QColor) -> None:
        p1 = edge[0]
        p2 = edge[1]
        self.scene.addLine(QLineF(*p1, *p2), color)

    def redraw_scene(self):
        self.scene.clear()
        rendered_objects = self.scene_objects.render()
        for line in rendered_objects["polygons"]:
            self.draw_line(line, QtGui.QColor("black"))
        scene_center: tuple[float, float] = self.scene_objects.scene_center
        self.center_image_label.setText(f"Центр изображения: {scene_center[0]:.1f}, {scene_center[1]:.1f}")

    def move_button_handler(self):
        if not self.validate(float, self.dx_value.text()):
            self.show_error("Ошибка перемещения", "Неверно указана координата x")
            return
        if not self.validate(float, self.dy_value.text()):
            self.show_error("Ошибка перемещения", "Неверно указана координата y")
            return
        dx: float = float(self.dx_value.text())
        dy: float = float(self.dy_value.text())
        self.scene_objects.move(dx, dy)
        self.redraw_scene()

    def cancel_button_handler(self):
        if not self.scene_objects.is_prev_state_reachable():
            self.show_error("Ошибка при отмене", "Текущее состояние является начальным")
            return
        self.scene_objects.get_prev_state()
        self.redraw_scene()

    def reset_button_handler(self):
        self.scene_objects.get_reset_state()
        self.redraw_scene()

    def center_button_handler(self):
        self.scene_objects.move_to_center(self.scene_center)
        self.redraw_scene()

    def scale_xy_button_handler(self):
        if not self.validate(float, self.x_scale_value.text()):
            self.show_error("Ошибка масштабирования", "Неверно задан коэффициент масштабирования x")
            return
        if not self.validate(float, self.y_scale_value.text()):
            self.show_error("Ошибка масштабирования", "Неверно задан коэффициент масштабирования y")
            return
        if not self.validate(float, self.center_x_value.text()):
            self.show_error("Ошибка масштабирования", "Неверно задан x центра вращения")
            return
        if not self.validate(float, self.center_y_value.text()):
            self.show_error("Ошибка масштабирования", "Неверно задан y центра вращения")
            return
        scale_x = float(self.x_scale_value.text())
        scale_y = float(self.y_scale_value.text())
        center = (float(self.center_x_value.text()), float(self.center_y_value.text()))
        self.scene_objects.scale(center, scale_x, scale_y)
        self.redraw_scene()

    def scale_center_button_handler(self):
        if not self.validate(float, self.x_scale_value.text()):
            self.show_error("Ошибка масштабирования", "Неверно задан коэффициент масштабирования x")
            return
        if not self.validate(float, self.y_scale_value.text()):
            self.show_error("Ошибка масштабирования", "Неверно задан коэффициент масштабирования y")
            return
        scale_x = float(self.x_scale_value.text())
        scale_y = float(self.y_scale_value.text())
        self.scene_objects.scale((self.scene_size[0] / 2, self.scene_size[1] / 2), scale_x, scale_y)
        self.redraw_scene()

    def rotate_xy_button_handler(self):
        if not self.validate(float, self.angle_value.text()):
            self.show_error("Ошибка вращения", "Неверно задан угол вращения")
            return
        if not self.validate(float, self.center_x_value.text()):
            self.show_error("Ошибка вращения", "Неверно задан x центра вращения")
            return
        if not self.validate(float, self.center_y_value.text()):
            self.show_error("Ошибка вращения", "Неверно задан y центра вращения")
            return
        angle = -float(self.angle_value.text())
        center = (float(self.center_x_value.text()), float(self.center_y_value.text()))
        self.scene_objects.rotate(center, angle)
        self.redraw_scene()

    def rotate_center_button_handler(self):
        if not self.validate(float, self.angle_value.text()):
            self.show_error("Ошибка вращения", "Неверно задан угол вращения")
            return
        angle = float(self.angle_value.text())
        self.scene_objects.rotate((self.scene_size[0] / 2, self.scene_size[1] / 2), angle)
        self.redraw_scene()
