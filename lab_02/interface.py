# Form implementation generated from reading ui file '.\kg1.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from typing import TypeVar, Type, Optional

from PyQt6 import QtCore, QtWidgets
from PyQt6.QtCore import Qt, QLineF, QRectF
from PyQt6.QtGui import QColor, QFont
from PyQt6.QtWidgets import QMessageBox, QTableWidgetItem

from mediator import SceneObjects


class Ui_MainWindow:

    def __init__(self, main_window, scene_objects: SceneObjects):
        self.objects_id: list[int] = []
        self.temporary_objects_id: list[int] = []
        self.cell_just_changed = False
        self.main_window = main_window
        self.scene_objects = scene_objects
        main_window.setObjectName("MainWindow")
        main_window.resize(1200, 800)
        self.central_widget = QtWidgets.QWidget(parent=main_window)
        self.central_widget.setObjectName("central_widget")
        self.resultView = QtWidgets.QGraphicsView(parent=self.central_widget)
        self.resultView.setGeometry(QtCore.QRect(10, 10, 610, 610))
        self.scene = QtWidgets.QGraphicsScene(parent=self.resultView)
        self.scene.setSceneRect(5, 5, 600, 600)
        self.resultView.setScene(self.scene)
        self.resultView.setObjectName("resultView")
        self.rotate_button = QtWidgets.QPushButton(parent=self.central_widget)
        self.rotate_button.setGeometry(QtCore.QRect(700, 100, 150, 30))
        main_window.setCentralWidget(self.central_widget)
        self.menubar = QtWidgets.QMenuBar(parent=main_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 647, 22))
        self.menubar.setObjectName("menubar")
        main_window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=main_window)
        self.statusbar.setObjectName("statusbar")
        main_window.setStatusBar(self.statusbar)

        self.translate_ui()
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def translate_ui(self):
        _translate = QtCore.QCoreApplication.translate
        self.main_window.setWindowTitle(_translate("MainWindow", "Лабораторная работа №2"))
        self.rotate_button.setText("Вращать")

    T = TypeVar("T")

    @staticmethod
    def validate(req_type: Type[float], s: str) -> bool:
        """
        Проверяет, что функция соответствует переданному типу.

        :param req_type: Ожидаемый тип, к которому должна быть приводима строка.
        :param s: Строка.
        :return: Является ли строка корректным значением.
        """
        try:
            req_type(s)
        except ValueError:
            return False
        else:
            return True

    def draw_line(self, edge: tuple[tuple[float, float], tuple[float, float]], color: QColor) -> None:
        p1 = edge[0]
        p2 = edge[1]
        self.scene.addLine(QLineF(*p1, *p2), color)

    def draw_polygon(self, edges: tuple[tuple[tuple[float, float], tuple[float, float]], ...], color: QColor) -> None:
        """
        Отрисовка полигона, представленного в виде кортежа своих ребер. Каждое ребро представляет собой кортеж точек.
        Каждая точка - кортеж из двух чисел: координат.

        :param edges: Кортеж ребер.
        :param color: Цвет
        :return: None
        """
        for edge in edges:
            self.draw_line(edge, color)

    def draw_circle(self, render_circle: tuple[float, float, float, float], color: QColor) -> None:
        """
        Отрисовка круга. Круг представлен кортежем, описывающим квадрат, в который он вписан. Стороны квадрата
        параллельны осям координат. Первые две координаты задают левый верхний угол квадрата, третья - ширину, а
        четвертая - высоту.

        :param render_circle: Кортеж, задающий круг
        :param color: Цвет
        :return: None
        """
        self.scene.addEllipse(QRectF(*render_circle), color)

    def show_error(self, title: str, message: str) -> None:
        """
        Отображение сообщения об ошибке.

        :param title: Заголовок сообщения
        :param message: Текст сообщения
        :return: None
        """
        QMessageBox.critical(self.main_window, title, message)

    def show(self) -> None:
        """
        Отображение приложения.

        :return: None
        """
        self.main_window.show()
